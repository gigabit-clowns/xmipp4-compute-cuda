name: Deploy release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    branches:
      - main

  workflow_dispatch:

jobs:
  build_wheel_manylinux:
    name: Build wheels for manylinux_${{ matrix.platform.architecture }} ${{ matrix.cuda-version.wheel-suffix }}
    strategy:
      matrix:
        cuda-version:
        - { wheel-suffix: "cu114", toolkit-package-suffix: "11-4", gcc-version: "9" }
        - { wheel-suffix: "cu118", toolkit-package-suffix: "11-8", gcc-version: "11" }
        - { wheel-suffix: "cu121", toolkit-package-suffix: "12-1", gcc-version: "12" }
        platform:
        - { runner: "ubuntu-latest", architecture: "x86_64", repo-architecture: "x86_64"}
        - { runner: "ubuntu-24.04-arm", architecture: "aarch64", repo-architecture: "sbsa"}

    runs-on: ${{ matrix.platform.runner }}
    env:
      RHEL8_NVIDIA_REPO: "https://developer.download.nvidia.com/compute/cuda/repos/rhel8/${{ matrix.platform.repo-architecture }}/cuda-rhel8.repo"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install pip dependencies
        run: pip install toml

      - name: Patch pyproject.toml with the CUDA suffix
        run: >
          python scripts/patch_cuda_suffix_pyproject.py
          -i ./pyproject.toml
          --suffix ${{ matrix.cuda-version.wheel-suffix }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.0.1
        env:
          CIBW_ARCHS: ${{ matrix.platform.architecture }}
          CIBW_BUILD: "cp313-manylinux*" # Python agnostic, pick any version
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_ALL: | # Based on: https://stackoverflow.com/a/77212119
            yum install -y wget
            wget ${{ env.RHEL8_NVIDIA_REPO }} -O /etc/yum.repos.d/cuda.repo
            yum clean all
            yum -y install cuda-toolkit-${{ matrix.cuda-version.toolkit-package-suffix }}
            rpm -ql gcc-c++
            dnf -y install gcc-toolset-${{ matrix.cuda-version.gcc-version }}-gcc gcc-toolset-${{ matrix.cuda-version.gcc-version }}-gcc-c++
          CIBW_ENVIRONMENT: >
            CUDACXX=/usr/local/cuda/bin/nvcc
            CUDAHOSTCXX=/opt/rh/gcc-toolset-${{ matrix.cuda-version.gcc-version }}/root/usr/bin/g++
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel}
            --exclude "libxmipp4-core.so*"
            --exclude "libcudart.so*"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-manylinux-${{ matrix.platform.architecture }}-${{ matrix.cuda-version.wheel-suffix }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_sdist, build_wheel_manylinux]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -l ./dist

      - name: Upload to PyPI # TODO enable this in the future
        if: false
        uses: pypa/gh-action-pypi-publish@release/v1

  create_developer_release:
    name: Create development release
    needs: [build_wheel_manylinux, build_sdist]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
    env:
      TAG_NAME: "development"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacs
        uses: actions/download-artifact@v4
        with:
          pattern: "cibw-*"
          path: dist
          merge-multiple: true

      - name: Create or update development tag
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'action@github.com'
          git add dist
          git commit -m "Add pre-built binaries"
          git tag -fa $TAG_NAME -m 'Update development tag with main branch'
          git push origin $TAG_NAME --force

      - name: Delete all old assets from development release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release view $TAG_NAME --json assets -q ".assets[].name" | while read asset; do
            gh release delete-asset $TAG_NAME "$asset" -y
          done

      - name: Create or update development release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Development build"
          body: >-
            This is an automated release containing binaries built with 
            with the head of the main branch.
          draft: false
          prerelease: true
          files: dist/**
