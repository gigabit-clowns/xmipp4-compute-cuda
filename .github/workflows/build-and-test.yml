name: Build and Test

on:
  pull_request:
    branches:
      - main

  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        os:
        - ubuntu-latest
        compiler: 
        - {cc: gcc, cxx: g++}
        - {cc: clang, cxx: clang++}
        cuda: 12.8.1
        
        include:
        - os: ubuntu-22.04
          compiler: {cc: gcc, cxx: g++}
          cuda: 11.8.0
        - os: windows-latest
          compiler: {cc: cl, cxx: cl}
          cuda: 12.8.1
  
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set gcc with alternatives 
        if: ${{matrix.compiler.update-alternatives}}
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/${{ matrix.compiler.cc }} 128
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/${{ matrix.compiler.cxx }} 128

      - uses: Jimver/cuda-toolkit@v0.2.22
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda }}
          method: 'network'
          non-cuda-sub-packages: '["libcublas", "libcufft", "libcusolver"]'
          log-file-suffix: '${{matrix.os}}-${{matrix.compiler.cc}}-${{matrix.cuda}}.txt'

      - name: Install xmipp4-core
        id: install-xmipp4-core
        uses: ./.github/composites/install-xmipp4-core
      
      - name: Configure and build with CMake
        uses: threeal/cmake-action@v2
        with:
          source-dir: ${{ github.workspace }}
          build-dir: "${{ github.workspace }}/build"
          c-compiler: ${{ matrix.compiler.cc }}
          cxx-compiler: ${{ matrix.compiler.cxx }}
          options: |
            CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
            xmipp4-core_ROOT=${{ steps.install-xmipp4-core.outputs.xmipp4-core-root }}
          run-build: true
          build-args: --config ${{ env.BUILD_TYPE }}

      - name: Run tests
        working-directory: "${{ github.workspace }}/build"
        run: ctest -C ${{ env.BUILD_TYPE }} -T test --rerun-failed --output-on-failure
